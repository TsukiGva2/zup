ARG.Usage usage       = NEW("Usage: %0% option [projectname]")
ARG.String newproject = NEW("n", "new", NIL, "create a new project")
ARG.Bool run          = NEW("r", "run", FALSE, "compile and run a project")
ARG.String delete     = NEW("D", "delete", NIL, "delete a project's folder")
ARG.Int  maxdepth     = NEW("p", "depth", 2, "max number of directories to recursively search for a makefile, defaults to 2")
ARG.Bool compile      = NEW("c", "compile", FALSE, "compile a project")

PROC dieOnErr(status stat, string msg, bool fatal = TRUE)
  IF stat.Equal(FAIL)
    IF fatal
      LOG.fatal(msg)
    ELSE
      LOG.error(msg)
    }
  }
}

PROC delDir(string name)
  FOR file IN IO.dirList(name)
    file = name .. "/" .. file
    IF IO.isDirectory(file)
      delDir(file) # recursively delete directories
      #dieOnErr(IO.rmdir(file), "couldn't delete dir", FALSE)
    ELSE
      dieOnErr(IO.delete(file), "couldn't delete file " .. file, FALSE)
    }
  }
  dieOnErr(IO.rmdir(name), "error deleting dir")
}

PROC findMakefile(int depth, int curr = 0)
  IF !IO.isReadable("Makefile") # recursively descend into dirtree searching for a makefile
                                # yes, i really like recursion
    IF curr <= depth
      dieOnErr(IO.chdir(".."), "couldn't descend directory")
      findMakefile(depth, curr + 1)
    ELSE
      LOG.fatal(
          "no Makefile found in directory tree (up to " .. depth .. " directories behind)" ..
          ", if your makefile is even further, try running with --depth X")
    }
  }
}

PROC compileProject()
    findMakefile(maxdepth.get())
    SYS.Process process = NEW("make")
      .writeTo("buildlog")
      .writeErrorsToOut(TRUE)
      .start()

    process.wait()
    IF process.didExitNormally()
      IF process.getExitValue() != 0
        writeLinesToFile("buildlog", FALSE, ["<--ERR-->", ""])
        LOG.fatal("couldn't compile program, check buildlog for more information")
      }
    ELSE
      writeLinesToFile("buildlog", FALSE, ["<--ERR-->", ""])
      LOG.fatal("process didn't exit normally, check buildlog for more information")
    }
    delDir("src/ZUDIR")
    writeLinesToFile("buildlog", FALSE, ["<--OK-->", ""])
}

PROC mkncd(string name, string display_name)
    dieOnErr(IO.mkdir(name), "error creating " .. display_name)
    dieOnErr(IO.chdir(name), "error entering " .. display_name)
}

PROC mkSubDirs(string parent, list<string> children)
  dieOnErr(IO.mkdir(parent), "error creating " .. parent .. " dir")

  FOR sub IN children
    dieOnErr(IO.mkdir(parent .. "/" .. sub), "error creating " .. sub .. " dir")
  }
}

PROC writeLinesToFile(string name, bool truncate, list<string> lines)
  IO.File f = IO.fileWriter(name, truncate)
  dieOnErr(f.writeAllLines(lines), "error writing " .. name, FALSE)
  dieOnErr(f.flush(), "error flushing " .. name)
  f.close()
}

FUNC Main() int
  IF ARG.rawSize() < 2
    IO.print(usage.get())
    EXIT 1
  }

  IF newproject.get() != NIL
  
    string projectname = newproject.get()

    list<string> readmeText = [
        "# " .. projectname,
        "",
        "<!--- project's description -->",
        ""]

    list<string> makefileText = [
        "# example makefile, it's not a good one though",
        "ZU=zimbu",
        "CC=gcc",
        "#CC=clang",
        "CFLAGS=",
        "ZUFLAGS=",
        "",
        "all:",
        "\tmkdir -p target/bin/",
        "\t$(ZU) $(ZUFLAGS) src/main.zu -o target/bin/" .. projectname,
        "\tcp src/ZUDIR/main.c target/c/",
        "",
        "c:",
        "\tmkdir -p target/bin/",
        "\t$(CC) $(CFLAGS) target/c/main.c -o target/bin/" .. projectname,
        ""]

    list<string> hwText = [
        "FUNC Main() int",
        "  # zimbu hates tabs for some reason",
        "  IO.print(\"hello, world!\")",
        "  RETURN 0",
        "}",
        ""]

    list<string> gitignoreText = [
        "ZUDIR/",
        "target/bin/",
        "buildlog",
        ""]

    mkncd(projectname, "project dir") # Mkdir and chdir
    writeLinesToFile(".gitignore", TRUE, gitignoreText)

    mkncd("src", "source dir")
    writeLinesToFile("main.zu", TRUE, hwText)

    dieOnErr(IO.chdir(".."), "error leaving source dir")
    mkSubDirs("target", ["bin", "c"])

    writeLinesToFile("Makefile", TRUE, makefileText)
    writeLinesToFile("README.md", TRUE, readmeText)

  ELSEIF delete.get() != NIL
    
    string projectname = delete.get()
    
    IO.print("are you sure you want to delete " .. projectname .. "?\n")
    IF IO.readChar().asString().toLower() == "y"
      IF IO.isDirectory(projectname)
        delDir(projectname)
        IO.print("done")
      ELSE
        LOG.fatal(projectname .. " is not a directory")
      }
    ELSE
      IO.print("ok! be careful next time\n")
      RETURN 0
    }
  
  ELSEIF run.get()

    compileProject()
    SYS.shell("target/bin/" .. IO.tail(IO.getdir())) # XXX: the good ol' system()

  ELSEIF compile.get()

    compileProject()

  }

  RETURN 0
}
